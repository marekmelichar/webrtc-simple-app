<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Basic video - getUserMedia</title>
  <!-- <link rel="stylesheet" href="public/styles.css" /> -->

  <style>
    .grayscale_filter {
      filter: saturate(0.03);
    }
  </style>
</head>
<body>
  <p><button id="takeProfilePicture">Create a profile picture</button></p>

  <video id="videoTag" autoplay></video>
  <canvas id="profilePicCanvas" style="display: none;"></canvas>
  <div>
    <img id="profilePictureOutput" />
  </div>

  <script>

    const constraints = {
      audio: false,
      video: { width: 1280, height: 720 }
    }
    
    var videoArea = document.querySelector("video");
    var videoSelect = document.querySelector('#camera');
    var profilePicCanvas = document.querySelector("#profilePicCanvas");
    var profilePictureOutput = document.querySelector("#profilePictureOutput");
    var takePicButton = document.querySelector("#takeProfilePicture");
    var videoTag = document.querySelector("#videoTag");

    var width = 240; //Desired width of the profile picture
			var height = 0; //Calculated later based on image ratio
			var streaming = false; //Used to determine when the video has loaded
			
			takePicButton.addEventListener('click', function(ev){
				takeProfilePic();
				ev.preventDefault();
			}, false);
			
			videoTag.addEventListener('canplay', function(ev){
				if (!streaming) {
					height = videoTag.videoHeight / (videoTag.videoWidth/width);
					
						// Firefox currently has a bug where the height can't be read from
						// the video, so we will make assumptions if this happens.

						if (isNaN(height)) {
							height = width / (4/3);
						}
					
						videoTag.setAttribute('width', width);
						videoTag.setAttribute('height', height);
						profilePicCanvas.setAttribute('width', width);
						profilePicCanvas.setAttribute('height', height);
						streaming = true;
				}
			}, false);
			
			function takeProfilePic() {
				var context = profilePicCanvas.getContext('2d');
				if (width && height) {
					profilePicCanvas.width = width;
					profilePicCanvas.height = height;
					context.drawImage(videoTag, 0, 0, width, height);

					var data = profilePicCanvas.toDataURL('image/png');
					profilePictureOutput.setAttribute('src', data);
				}
			}






    const promise = navigator.mediaDevices.getUserMedia(constraints)
      .then(stream => {
        console.log('success')
        videoArea.srcObject = stream
        videoArea.className = "grayscale_filter"
        videoArea.play()
      })
      .catch(error => {
        console.log('error', error)
      })

  </script>
</body>
  <script src="https://webrtchacks.github.io/adapter/adapter-latest.js"></script>
</html>